[{"content":"Background 人人都是产品经理，\n人人都是内容创作者vloger，\n在知识快速迭代的今天， 知识的实践整理输出是必须的。\n而静态markdown站点，无疑是辅助我们输出整理的有效武器。\n弄清哪些功能是必须的，有助于我们选择适应的工具。\n必须的功能 支持原生的 markdown 渲染，这样即使迁移也不用更改。 自带搜索的功能，不需要集成。且搜索页最好当前页显示，减少页面跳转！ 支持文档目录，与文章内大纲的显示，便于长文时导航。 生成速度不能太慢，特别是文章比较多时。 最好开箱即用，以便聚焦整理输出。 参考站点 mkdocs 程序员做饭指南\n修改记录 2022-12-02：初版 ","permalink":"https://bp0604.github.io/post/mkdocs-and-static-markdown-site-thinking/","summary":"静态Markdown站点需要有什么样的功能的一些思考。","title":"Mkdocs及静态Markdown站点的思考"},{"content":"出处 https://www.ruanyifeng.com/blog/2022/10/weekly-issue-227.html 50 岁码农面试记\n我摘录下重点。（使用trilium剪切）\n感想 楼主学习力与执行力都很强，还是需要下狠功夫。 是属于那种学习又好又拼命之类的人。\n由于现在技术发展太快了，我们还是要适度聚焦，深入技能。\n楼主先使用的python，后来看是去看了java。 leetcode看来国外也很流行了。系统设计题是不可少的。 国外还是很流行AWS的，再加上现在腾讯云，阿里云各种收费了。 还是看下国外的相应服务是否免费白嫖下？\n最近我对比了招聘要求，在很多方面需要重点笔记式学习：\n面向对象模型设计（UML，流程图） DDD 数据挖掘，繁琐事情，UI展示（python，orange，streamlit，excel/csv，mysql\u0026hellip;） 大数据（从pyspark开始，其Dataframe与pandas的类似），,elasticsearch搜索方面无比重要，也需要完整练习下。 aigc流行，显示了深度学习的威力，以及其他行业的应用（推荐系统，音频降噪，视频提帧）。 语言方面（重点看下serveless相关）：\njava python react及前端 有空golang 可以在Youtube和Bilibili上找下相关的视频，还有freecodecamp，并需要实践练习下。（光说不练假把式，要动手，可录音，可手写，然后再对比！！）\n正文 长文摘要：20年前工科硕士毕业后即混入IT部门工作至今，今年1月萌生换工作意愿，于是从头学习数据结构和算法，3月开始Leetcode刷题，4月底开始投简历，7月底小厂上岸。 20YOE的Senior SDE不会任何一门编程语言的吗？是的，我这20年来只会在Oracle上用SQL写点儿查询，堆栈链表树通通没用过，TCP/IP是啥玩意儿，分布式系统听都没听说，更别提什么AWS、Azure了。\n换工作的原因？就是嫌目前薪资太低了，年薪80K加元，没有股票，每年薪资涨幅只有可怜的1.5%，连通胀都跑不赢。\n为什么呆了20年才想起跳槽？对于咸鱼来讲目前这份工作只要忽视薪资低这一个缺点外，其他全是优点：假期多福利好工作清闲无压力无裁员风险。既然这么多优点也就难怪很多同事直接躺平等退休了，而且心知肚明自己就是一只弱鸡。80K在地里不值一提，但在加拿大可也属于TOP 15%了。井底躺久了也一直懒得去了解外面的劳工市场行情，觉得这辈子也就这样了吧。\n萌生了换工作的意愿之后，首先就是上网搜集信息，找来找去找到了一亩三分地。不看不要紧，一看吓一跳，如今NG起薪都已经是我薪资的2倍了？！300K的low穿地心包？！\n种一颗树最好的时机是20年前，其次是现在，那就开干吧。先把地里的置顶文章读了一遍，搞清楚找工的步骤流程。\n先写简历吧，于是把20年前毕业找工作时的简历翻了出来，加上现在这段的20年经验。工作内容？即使干了20年都乏善可陈。SKILLS？除了SQL和Oracle还能写点啥呢？什么编程语言都不会。算了别写简历，先看书吧。\n下载了一本Data Structures and Algorithms in Python，开始学习数据结构和算法以及Python。一旦读起来才发现自己以前简直是个FIVE，面向对象怎么编程？还有位运算这种骚操作？开始3章还认认真真把每一章后面的习题都做一遍，到了后来就懒得做了，红黑树这转来转去的谁看得懂，不懂的就跳过，越到后面跳过的越多。\n3月了，读书读不下去，那就上Leetcode上刷刷题吧，试试就逝世。第一道2sum就把我困住了，双重循环不对吗？咋还超时了？！卧槽dictionary还能这么用，为什么用hashmap的时间复杂度是O(1)呀？又回头去翻算法书\u0026hellip;\u0026hellip;\n就这么一边刷题一边温习书本，2周约莫刷了100道题。然后某天点开曾刷过的题，咦？这题我好像见过，可是怎么解的来着？好像是\u0026hellip;..算了还是看看以前怎么做的来着吧。\n就这么一边刷新题一边复习旧题，时间就来到了4月，刷完300多题慢慢也有了感觉。随便提一句，Leetcode的会员是我觉得最值的会员消费了，也是我找工期间的唯一花费了，其他的所有书籍教程都是网上白嫖的。\n简历上终于可以大着胆子加上一门编程语言了，参考了各种简历模板和本单位的招聘广告，工作经验也强行凑满了半页纸。\n怕年龄歧视不敢写自己的读书工作日期，我能理解这种顾虑。可是我都50了，视频面试的时候还藏得住一张老脸？如果公司有年龄歧视，就算我真进了也不可能感觉舒服。所以我还是把所有的日期都标得清清楚楚，任谁看一眼就能估算出年龄了。\n学历，我并非CS出身，20年前还没有转码一说，面试也不考编程，有个工科硕士学历很容易就混进去了，同组的还有高中学历哩。最后我还是照实写了自己的天坑专业，首先工作这么多年后其实已经没人关心你的学历了，学历都是放在简历最后面。其次如果公司因此就不要我，那么你们公司也不是我想去的地方。\n接下来就是投简历，各大找工网站我都注册并完善信息上传简历了，如今看来其实没什么卵用，反而是浪费时间。最有效的方式是完善自己的LinkedIn，我都没有主动出击，就有一些Recruiter来勾搭，因而拿到OA电面的机会非常高。其次是内推，地里内推的资源很多，小伙伴们也是很热情地给出建议。然后就是直接登录大厂官网找，最后就是找LinkedIn上的Job，我会开着Easy Apply的过滤选项，既然海投我就尽可能地在短时间内广撒网了。\n我不禁心想自己这20YOE还不如没有呢，如果是新手转码，从Junior开始申请反而更容易。可是看着Senior职位的一堆要求自己又胆怯了，只好尽量挑些不带Senior和Entry Level字眼的职位申请了。\n4月底大概海投了近百份简历吧，终于有一个美国大学的Recruiter发email来说想聊聊。20年来第一次和Recruiter电聊，我也是激动得不行，把要说的全都写了下来，半小时把自己从出生长大上大学到出国读书工作全讲了一遍，估计Recruiter也是被我的热情吓到了，小心翼翼地问我说看你在LinkedIn上设置的搜索条件是140K美元，可是我们只能提供125K。这个时候我当然不会谈钱啦，blahblah表达了一番视金钱如粪土只在乎你们的大学环境后就结束了。完事写了一个感谢信，然后音信全无。\n5月初突然有个亚麻Recruiter在LinkedIn上找到我，说他手里有4个亚麻的职位，让我去申请一下。我想也没想就申请了一个，然后他就开始安排电面，这可把我吓坏了，上来就大厂呀。硬着头皮上吧，从可选的日期里挑了最晚的一天，2周以后。\n然后这两周里就只做两件事，一是在Leetcode上挑亚麻高频题拼命刷题，一是参考各种亚麻LP资料按照STAR原则编写自己的小故事。电面开始问了两个BQ，又问了几个数组链表哈希的基础数据结构知识，考了道简单coding题二零，居然就过了。然后就通知安排最终面试一共5轮，明确要考系统设计。天哪我根本没有任何系统设计经验的啊，面试定在了3周以后。\n接下来的3周时间就只做一件事，学习系统设计。学习的资料主要是System Design Interview An Insider’s Guide，各种新鲜词汇层出不穷啊，遇到新词就查wikepedia。反复读了两遍，第一遍跟着画图，第二遍按自己的理解重新画图。\n但第二天就到亚麻了，强打起精神迎接首次重大挑战吧。\n第一轮是hiring manager，问了半小时BQ，细节追问得很深。coding做出来了，但是follow-up没答上来。第二轮系统设计一个群聊系统，经典系统设计问题了，回答得自我感觉很满意。第三轮coding也很满意，第四轮coding题目很简单，但是被我改来改去显得比较乱。第五轮纯BQ，准备的小故事已经不够用了啊，没办法重复说一遍吧。\n最后得知没过，如今想来应该是败在BQ上了。毕竟我没有什么拿得出手的项目经验，编的几个小故事听起来弱得一批。反而临时抱佛脚的系统设计是最好的，coding刷到400多题后medium基本都能对付了。\n因为准备亚麻面试，1个半月的时间没有投过简历了。6月下旬又把简历改了一遍，开始疯狂海投。不再把目光局限在美国，加拿大作为主场还是优势更大些。投美国岗位时都会被问到将来是否需要sponsorship？我本想说加拿大公民不需要，可是再一细看sponsorship的说明包括H1B和TN，我心想TN Status还是需要的，于是选择了YES。估计这也直接导致很多拒信吧。\n海投了多少我已记不清，500+吧，期间还不断有Recruiter来骚扰我。那些直接发email过来的中介公司三哥Recruiter最不靠谱，交换完简历和职位信息后就失联了。感觉他们就是为了完成KPI而群发的，根本不是真心招人。\n这期间还发生了一起求职诈骗事件\n电话效果很差，没说上几句话就互相听不到对方了。挂断后对方又拨了过来，连自我介绍都没说完就又断掉了。我心想算了，挂我的公司多了去了，也不在乎你一个。\n然后晚上就收到email说对我的面试表现很满意，要给我offer。我心想不会是骗子吧，可是又能骗我什么呢？骗我免费干活？接着收到一个Word格式的offer，时薪70加元，完全远程办公。我第二天说好啊好啊，怎么开始办公呢？对方给了我一个Telegram的账号让我联系她，说帮我setup远程办公环境。我就注册了Telegram联系上这个人，她说欢迎啊然后发给我一张3K的支票截图说是给我的启动资金。让我把支票存进了银行发回了确认截图，然后她让我e-transfer给某个账户1K用于购买办公设备。\n吼吼吼，跟国内日新月异的电信诈骗杀猪盘相比，国外诈骗手段这么多年真是不思进取，还在玩跳票那老一套。我客客气气地说等过几天我的银行确认了你们的支票没问题以后我才会转钱给你们，对方编了个牵强的理由继续催促无果，发现骗不了我就只好放弃了。果然过了一周银行告知支票跳票了。\n话说回来，那些来自LinkedIn的Recruiter就比较靠谱，会聊会推会安排电面，先后电面了2次巨硬2次抖音1次苹果但都fail了。还有一些Recruiter聊着聊着后就发现我其实是个弱鸡，云也没用过？Java也不会？TCP都不知道？那就谈谈你的强项数据库吧。什么？你连索引采用的是什么数据结构也不知道？(后来查过才知道是B+树)\n我和老婆说这样不行，基础太差，继续面试只会继续失败，不断失败压力好大。老婆安慰我说没关系呀咱们不急啊，反正目前工作已经很好了，慢慢来呗，要不先度个假散散心？\n我说算了，时间宝贵，学得越多发现自己不会的越多。于是我开始系统地学习Java全套教程，用Java把Leetcode旧题重刷一遍，巩固旧题的同时学习了Java。另一方面跟着B站视频教程学习，准备考一个AWS SAA证书，因为我发现几乎每个Recruiter都会问我有没有云使用经验，而我老老实实回答说没有以后很多就凉了。\n地里关于H公司的信息很少，5年来的面经全收集起来也才12道题。第一轮是个VP，主要是聊BQ，最后来个系统设计主要问DB的选择和扩容。感觉一顿吹捧下来对方很开心。第二轮coding，暴力求解很直接嘛，能不能优化？瞎JB折腾了一番后还是不会。然后又出了道经典二零零，秒了。第三轮coding，对方全程不说话，看我一个人在那里挣扎。其实题目不难，可我当时一紧张就卡壳了，凑了个答案出来，但自己清楚是错误的。最后一轮又是周一电面的那个人，原来是hiring manager，聊了聊前面3轮的面试过程，10分钟就结束了。\n面试刚一结束整个人松弛下来，立刻想出了第三轮coding的答案，我TM当时怎么就没想到呢，一点儿都不难的嘛。心中非常懊恼，可是又能怎么办呢，打起精神准备下周的两个电面吧。\n. From 1point 3acres bbs谁能料到运气突然就从天而降了呢，周一收到H公司Recruiter的来信，说我面试表现很好，问我什么时候能聊聊。要不是我知道H公司已经上市，我都要怀疑这又是一个骗子。周二和Recruiter视频，说面试反响很好，决定给我offer。我一边假装激动地写下数字，一边暗暗腹诽我面试表现哪里好了，莫非是第一轮把VP拍舒服了？\n接下来就是根据谈判的10条原则和Recruiter交手了，强调了自己对公司的兴趣，列举了3条提高salary的理由，表示接下来还有2个最终轮面试要准备。事到如今形势已经逆转了，是公司在求着我赶紧签约了。嗯，那我们再等等看吧。来来回回拖了一个多星期，在原offer上各项都增加了5~10K，签定了最终包(加元)：base 155K + RSU 220K (4*25%) + sign-on 20K + relocation 10K。今年就业形势不太好，而且我手里并没有其他offer可以compete。早定早入职，以免夜长梦多。\n回首这半年来我从一无所知开始学习了数据结构、算法、Python、Java、OOD、系统设计、网络、数据库、Git、UML、Hadoop、NoSQL、RESTful、ETL、AWS等等。\n当然coding是重点，关键不在难度，而在于类型。归纳总结题目类型后基本就能做好medium题目了，在我20+场coding中基本全是medium和easy，hard就遇到过一个吧。我自己觉得刷够300道经典题就够了，如今的面试coding还不算太卷，基本上大家都能过及格线吧，不太能够凭coding把大家区分开来。\n由于我之前完全没有系统设计经验，一开始对系统设计很畏惧。系统设计是一个太宽泛的话题了，在此学习过程中不断遭遇全新的领域。我的学习方法就是搜索“某领域”+“快速入门”比如“网络快速入门”，一切以速成为目标。纸上谈兵一旦深入问下去就很容易露馅，但我也没有办法，没经验就是没经验，只能多了解些背景和名词了。\n我个人觉得面试最能让人脱颖而出的其实是BQ，想想看5个进入最终轮面试的候选人coding实力应该都足以解决medium问题，系统设计给出的方案和知识面表现估计也是大同小异，但是BQ表现可就真的千差万别了。每个人的过往项目经验都不一样，如何包装如何表达才能打动面试官？就算大家都用START框架编故事，你如果能让hiring manager感觉你比其他人更fit这个职位，那么你就赢过其他候选人了。尤其是最后几分钟的提问时间，一定要认真准备好反向BQ，这是展示热情和兴趣的最佳机会。\n去年据说是找工的最好年份，而今年的形势就差多了，很多公司Hiring Freeze，我自己也经历过走到最终轮面试但却突然接到消息说招聘暂停了的。我很清楚自己能收获这份offer并非自己实力出众，只能感慨运气太好。\n评论 国外的氛围真好，国内多半要转外卖或滴滴了~\n我的天！50岁在职半年自学这么多概念，一个月leetcode 300+，海投500+，这执行力真的绝了！\n我以为我30岁转码已经够努力了，跟你一比简直跟躺着没区别。\n果然心态年轻，想干就干就会心想事成！\n向你学习！！\n同在加拿大，我也是近期面试，遇到的基本都是medium和hard，尤其是hard的题，好几家不同的公司遇到好几道……\n大哥是在职搞的吗？半年学了这么多东西又海投500+，行动力惊人啊\n感觉楼主好有活力执行力也很强，而且遇到困难也总是迎难而上努力解决！有回报是应得的！！\n这大哥心态很年轻。\n很明显，做不做成一件事跟年龄无关，跟努不努力和有没有毅力有关。\n类似链接 待补充\n","permalink":"https://bp0604.github.io/post/50-year-old-coder-interview/","summary":"作者是加拿大华人，一直从事数据库管理。工作了 20 年后，他想转开发，于是猛刷 Leetcode，开始投简历求职。","title":"50 岁码农面试记"},{"content":"使用 tail 命令 tail -f /var/log/syslog tail -f /var/log/syslog /var/log/dmesg 没有颜色\n使用 lnav（日志文件浏览器） sudo apt install lnav # Ubuntu sudo dnf install lnav # Fedora 默认显示 /var/log 中的所有日志并开始实时监控。 还可通过 SQL 查询日志文件\n示范 从apache访问日志文件中获取前10个客户端IP地址，并将结果以CSV格式写入标准：\nlnav -n \\ -c \u0026#39;;SELECT c_ip, count(*) AS total FROM access_log GROUP BY c_ip ORDER BY total DESC LIMIT 10\u0026#39; \\ -c \u0026#39;:write-csv-to -\u0026#39; \\ access.log Lnav doc 说实话，在Terminal中显示不直观。还是有UI界面的好用些。\n比如Loki或是Kibana或其他。\nsystemd 的 journalctl systemd 通过 journalctl 提供日志服务\njournalctl -f 显示带有解释的错误 journalctl -xb -p 3 时间控制 journalctl --since \u0026#34;2020-12-04 06:00:00\u0026#34; journalctl --since \u0026#34;2020-12-03\u0026#34; --until \u0026#34;2020-12-05 03:00:00\u0026#34; journalctl --since yesterday journalctl --since 09:00 --until \u0026#34;1 hour ago\u0026#34; ","permalink":"https://bp0604.github.io/post/realtime-monitoring-log-files-under-folder/","summary":"简单工具的有效利用。","title":"实时监控log日志文件夹下文件"},{"content":"Homepage Alpine.js (alpinejs.dev)\nDemo Search at google:\nalpinejs CRUD demo github\nhttps://github.com/devboyarif/alpinejs-crud https://devboyarif.github.io/alpinejs-crud/\nAlpine.js example https://gist.github.com/rg3915/29d7fd11db09bf8c0f226117d3b4db0f\nnpm install -g json-server json-server --watch db.json db.json\n{ \u0026#34;todos\u0026#34;: [ { \u0026#34;id\u0026#34;: 1, \u0026#34;task\u0026#34;: \u0026#34;Um\u0026#34; }, { \u0026#34;id\u0026#34;: 2, \u0026#34;task\u0026#34;: \u0026#34;Dois\u0026#34; }, { \u0026#34;id\u0026#34;: 3, \u0026#34;task\u0026#34;: \u0026#34;Três\u0026#34; } ] } npm install --global http-server http-server [path] [options] index.html\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0, shrink-to-fit=no\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;shortcut icon\u0026#34; href=\u0026#34;https://alpinejs.dev/favicon.png\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Alpine JS\u0026lt;/title\u0026gt; \u0026lt;!-- Bulma --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css\u0026#34;\u0026gt; \u0026lt;!-- Font-awesome --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\u0026#34;\u0026gt; \u0026lt;!-- Alpine --\u0026gt; \u0026lt;script defer src=\u0026#34;https://unpkg.com/alpinejs\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- https://github.com/devboyarif/alpinejs-crud/blob/master/index.html --\u0026gt; \u0026lt;!-- https://github.com/danharrin/alpine-tailwind-components/blob/main/select/index.html --\u0026gt; \u0026lt;style\u0026gt; .is-done { text-decoration: line-through; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body class=\u0026#34;mt-3\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34; x-data=\u0026#34;getTodos()\u0026#34; x-init=\u0026#34;$watch(\u0026#39;task\u0026#39;, value =\u0026gt; {if (value.length \u0026gt; 0) required=false})\u0026#34; \u0026gt; \u0026lt;div\u0026gt; \u0026lt;form @submit.prevent=\u0026#34;saveData\u0026#34; class=\u0026#34;form-inline\u0026#34; \u0026gt; \u0026lt;div class=\u0026#34;field is-grouped\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;field\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;control\u0026#34;\u0026gt; \u0026lt;input class=\u0026#34;input\u0026#34; type=\u0026#34;text\u0026#34; maxlength=\u0026#34;20\u0026#34; class=\u0026#34;input\u0026#34; :class=\u0026#34;required ? \u0026#39;is-danger\u0026#39; : \u0026#39;\u0026#39;\u0026#34; placeholder=\u0026#34;Tarefa\u0026#34; x-model=\u0026#34;task\u0026#34; autofocus \u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p class=\u0026#34;help is-danger\u0026#34; x-show=\u0026#34;required\u0026#34; \u0026gt; Favor preencher a tarefa. \u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;help has-text-right\u0026#34; x-show=\u0026#34;task.length\u0026#34; x-text=\u0026#34;task.length\u0026#34; \u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p class=\u0026#34;control\u0026#34;\u0026gt; \u0026lt;button class=\u0026#34;button is-info ml-3\u0026#34; type=\u0026#34;submit\u0026#34; \u0026gt; OK \u0026lt;/button\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;table\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;template x-for=\u0026#34;todo in todos\u0026#34; :key=\u0026#34;todo.id\u0026#34; \u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td :class=\u0026#34;todo.done ? \u0026#39;is-done\u0026#39; : \u0026#39;\u0026#39;\u0026#34; x-text=\u0026#34;todo.task\u0026#34; @click=\u0026#34;toggleDone(todo.id, todo.done ? false : true)\u0026#34; \u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;i class=\u0026#34;fa fa-times has-text-danger ml-3\u0026#34; @click=\u0026#34;deleteTask(todo.id)\u0026#34; \u0026gt;\u0026lt;/i\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; const getTodos = () =\u0026gt; ({ url: \u0026#39;http://localhost:3000/todos\u0026#39;, todos: [], task: \u0026#39;\u0026#39;, required: false, init() { fetch(this.url) .then(response =\u0026gt; response.json()) .then(data =\u0026gt; this.todos = data) }, saveData() { if (!this.task) { this.required = true return } fetch(this.url, { method: \u0026#39;POST\u0026#39;, headers: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39; }, body: JSON.stringify({ task: this.task }) }) .then(response =\u0026gt; response.json()) .then(() =\u0026gt; { this.init() this.task = \u0026#39;\u0026#39; }) }, toggleDone(id, value) { fetch(`http://localhost:3000/todos/${id}`, { method: \u0026#39;PATCH\u0026#39;, headers: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39; }, body: JSON.stringify({ done: value }) }) .then(response =\u0026gt; response.json()) .then(() =\u0026gt; { this.init() }) }, deleteTask(id) { fetch(`http://localhost:3000/todos/${id}`, { method: \u0026#39;DELETE\u0026#39;, }) .then(response =\u0026gt; response.json()) .then(() =\u0026gt; { this.init() }) }, }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","permalink":"https://bp0604.github.io/post/alpine-crud/","summary":"Alpine简单CRUD示范","title":"Alpine CRUD"},{"content":"视频 也许是B站最好的Obsidian新手教程！爆肝30天，一站式入门双向链接笔记软件_哔哩哔哩_bilibili\n实践下上面的内容！\n插件安装 Template\nDataview\n阅读pdf\n","permalink":"https://bp0604.github.io/post/obsidian/","summary":"重学","title":"Obsidian"},{"content":"翻唱工具 移除人声并隔离 https://vocalremover.org/zh/\n多年前的指南文章 TODO samplitude\n贴唱混音工程模板 from flomo http://blog.reamix.org/post/mixing-rpp-template\n30天让你拥有好声音（完结） 第1课-打开口腔的秘密_哔哩哔哩_bilibili\n龚骏Mixer https://space.bilibili.com/21666376\n人声贴唱教程系列总结帖#混音# #音频后期# #后期混音教程#\n关于贴唱混音你所需要知道的都在这条微博里了，如果看完所有的内容你还不会，emmm\n贴唱混音视频系列：\n混响篇1：网页链接\n混响篇2：网页链接\n伴奏篇：网页链接\n人声衰减EQ和扫频：网页链接\n人声压缩和提升EQ：网页链接\n简易的总线母带处理：网页链接\n贴唱混音实例简析《去追一只鹿》：网页链接\n混音基础系列的图文教程合集（包含修音）：\n视频\n修节奏：网页链接\n修音准：网页链接\nEQ1：网页链接\nEQ2：网页链接\n文章：\nEQ概述：教你认识 EQ（均衡器）- 影响声音色彩的要素\n压缩1：歌曲动态的掌控者 - 压缩效果器（壹）\n压缩2：压缩效果器（贰）- 教你怎么调压缩\n压缩实调1(API2500)：教你用超简单傻瓜式压缩 WAVES - API2500\n压缩实调2(CLA-2A)：教你用超简单傻瓜式压缩（二）CLA-2A\n压缩实调3(VSC-2)：教你用超简单傻瓜式压缩（叁）VSC-2\n混响1：混响效果器（壹）- 美化音色的神器\n混响2：混响效果器（贰）其他重要参数\n混响3：混响效果器（叁）主要混响类型\n混响4：混响效果器（肆）怎么设置混响效果器的参数\n混响实调1(H-reverb)：我常用的混响插件 H-Reverb 介绍与使用法\n混响实调2(Fab Pro-R)：我常用的 Plate 混响插件 Fab Pro R 介绍与使用法\n混响实调3(D-verb)：我常用的 Plate 混响插件 D-verb 介绍\n混响实调4(Abbey Road Plate)：常用 Plate 混响 Abbey Road Plates 介绍与使用法\n两个有关小知识：\nBPM:什么是 BPM，关于数字音乐制作你必须了解的\n采样率位深：采样率和位深，关于数字音乐制作你必须了解的\n然后我的教程系列就要告一段落了，有缘再见！ 抽奖详情\n短视频平台翻唱人声前期处理终极简明教程 短视频平台翻唱人声前期处理终极简明教程 - 知乎 (zhihu.com)\n某宝价值500的直播声卡效果模板，真的值吗？ 某宝价值500的直播声卡效果模板，真的值吗？ - 知乎 (zhihu.com)\n效果器序列号 BBE Sonic Sweet Optimized SWOP-BHUG-DLDF-CFCF-CIBA-DGDK-DCDD-AJAE-CACP\n贴唱混音插件推荐（精） https://zhuanlan.zhihu.com/p/139486107\n贴唱混音经验分享与实战演示 | 蝙蝠音乐公开课 小女孩的声音为例，有修间，调节奏的部分 https://www.ixigua.com/7101878347218715143 还有母带的相关视频 https://www.ixigua.com/7005466884451598879 混响 多段压缩\n简单的贴唱人声后期教程，用尽可能少的步骤达到还不错的效果 【混响】效果器教程 —— 百万调音必备｜【混音教程】 https://www.bilibili.com/video/BV1WS4y1Q75L/ Delay https://www.bilibili.com/video/BV1C44y1M717?spm_id_from=333.999.0.0\n混音相关文章 TODO 果果 - 知乎 (zhihu.com)\n移除人声并隔离 / BPM查询 分离人声 [AI] (vocalremover.org)\n[挖坑・提纲] 贴唱混音教程（见解心得分享为主） https://www.bilibili.com/read/cv8557248/\n正确的人声混音效果插件的顺序（必学） https://www.bilibili.com/video/BV1oi4y1y7c4/\n总结部分：7:00\n减法 EQ（100Hz 以下、共振峰） 串联压缩（处理峰值、处理动态） 加法 EQ（200Hz、5kHz 以上\n空间：延迟 - 混响\n进阶：齿音DeEssing - 自动控制（空间之前）- 染色（这个我不清楚）\n","permalink":"https://bp0604.github.io/post/singing-song-guide-wiki/","summary":"唱歌🎤️是人生来的本能。如何唱得好听，也是一门艺术。","title":"翻唱指南wiki"},{"content":"资源 https://github.com/ruanbekker/drone-gitea-on-docker\nhugo推送github 好像目前用不到？！\n","permalink":"https://bp0604.github.io/post/drone-cicd/","summary":"轻量级cicd必选。","title":"Drone cicd"},{"content":"背景 真要仔细看，估计得从官方文档开始看。 freecodecamp上也有相关的内容。\n再加上，切图，Css，UI设计那一块。\n不是专业的，没办法弄。\n官方beta文档 https://beta.reactjs.org/learn\nReact-Tutorial-For-Beginners Youtube: https://www.youtube.com/watch?v=fP1C-pXZEe0 Github Repository: https://github.com/tombaranowicz/React-Tutorial-For-Beginners\nContent explained in this video:\nReact project setup Forms Navigation between different pages using Reach Router Fetching data from API and mapping into components Conditional Rendering Class and Function Components React Hooks (useState and useEffect) \u003c!DOCTYPE HTML\u003e 有意思的项目 https://github.com/boojack/sticky-notes https://sticky-notes.onrender.com/\nBuilding a Url Shortener With Node.Js https://reflectoring.io/node-url-shortener/ 后端monogdb\nhttps://appworks.site/ 基于 VS Code 插件的前端研发工具集，让前端开发更快更好更轻松。（阿里巴巴）\n飞冰 https://ice.work/docs/guide/start/\nreact template google 搜索上面的关键字: vite react typescript tailwind template\n还需要 route store mock pnpm\nhttps://vital.josepvidal.dev/ https://github.com/fabgrel10/vite-react-starter\nhttps://github.com/cpojer/vite-ts-react-tailwind-template\nhttps://github.com/vitejs/awesome-vite 下面的推荐：\nvite-react-ts-tailwind-firebase-starter - Starter using Vite + React + TypeScript + Tailwind CSS (daisyUI) + Firebase (v9) + Prettier + ESLint. chrome-extension-boilerplate-react-vite - React + TypeScript + SASS + Prettier + ESLint + GitHub Actions + Chrome Extension Manifest v3. Admin React Admin - Open-Source Framework for B2B applications (marmelab.com)\nThe React Framework For B2B Apps React-admin offers the best developer experience, lets you focus on business needs, and build delightful user interfaces.\nReact-admin [[React admin后台]]\n官网文档 https://zh-hans.reactjs.org/docs/getting-started.html\nhttps://beta.reactjs.org/\namis 基于react React 2022 https://blog.esonwong.com/react-2022/\n","permalink":"https://bp0604.github.io/post/react-practices/","summary":"看来看去，前端都是跑不掉的。由于国外的项目，大多是以React具多，所以我还是看下React。并且其概念相对来说比较少。","title":"React实践"},{"content":"项目地址 https://github.com/yangzongzhuan/RuoYi-Vue/\n可优先在 Opengrok 上看代码。 Local Opengrok Search http://192.168.2.88:18080/xref/RuoYi-Vue/\n或者 Sourcegraph https://sourcegraph.com/github.com/yangzongzhuan/RuoYi-Vue\n文档： http://ruoyi.vip/\n官方推荐 🔥 RuoYi-Vue 全新 Pro 版本，优化重构所有功能。基于 Spring Boot + MyBatis Plus + Vue \u0026amp; Element 实现的后台管理系统 + 微信小程序，支持 RBAC 动态权限、数据权限、SaaS 多租户、Flowable 工作流、三方登录、支付、短信、商城等功能。你的 ⭐️ Star ⭐️，是作者生发的动力！ https://github.com/YunaiV/ruoyi-vue-pro https://gitee.com/zhijiantianya/ruoyi-vue-pro 文档是收费的。 199元？\nWK 系列开发框架 - V6 至 V8 Java 微服务 + 网关 + Vue Element 前后端分离 https://gitee.com/budwk/budwk\nBilibili 视频 若依框架vue版本源码解析（一）手把手教你下载源码，本地启动成功运行项目 若依框架vue版本源码解析（一）手把手教你下载源码，本地启动成功运行项目_哔哩哔哩_bilibili\n最火后台管理系统 RuoYi 项目探秘，之二 https://juejin.cn/post/7160955143188381727\n","permalink":"https://bp0604.github.io/post/spring-ruoyi-vue-and-ruoyi-vue-pro/","summary":"我想来想去，只能支持到单项目多module化的开发方式。cloud的方式事太多了。多前后端分离，数据库分库就已经不错了。（在100多个表中找Table真是眼花）","title":"Srping的RuoYi-Vue与ruoyi-vue-pro"},{"content":"数据生成 在Table上右击Date generation，可生成数据。 记得以前版本好像没这功能。\n也可以使用 存储过程，来生成。 novel这个开源项目中，有分表的脚本 。\n造数据，跑批任务 xxl-job 我在数据库中插入了大概两百万条数据，把造数据的过程也分享给你们 https://juejin.cn/post/7095586469145739300\n// 1、创建表 CREATE TABLE `t_repay_plan` ( `id` int(11) NOT NULL AUTO_INCREMENT, `repay_time` datetime DEFAULT NULL COMMENT \u0026#39;还款时间\u0026#39;, `str1` int(11) DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB AUTO_INCREMENT=3099998 DEFAULT CHARSET=utf8mb4 // 2、创建存储过程 delimiter $$ create procedure insert_repayPlan() begin declare n int default 1; while n\u0026lt; 3000000 do insert into t_repay_plan(repay_time,str1) values(concat( CONCAT(FLOOR(2015 + (RAND() * 1)),\u0026#39;-\u0026#39;,LPAD(FLOOR(10 + (RAND() * 2)),2,0),\u0026#39;-\u0026#39;,LPAD(FLOOR(1 + (RAND() * 25)),2,0))),n); set n = n+1; end while; end // 3、执行存储过程 call insert_repayPlan(); Chart图表功能（咨询公司杀手锏） 不知是否能代替外部的 metabase，Tableau，fineBI ，finereport之类的可视化工具应用。\n先看下自带的示范，自带了两个 Data Source。 分别是：CustomerCount(单表) 和 Order（多表联结） 图表支持 Presentation演示。\n还可以设置月份等条件。\nCustomerCount(单表) 字段：\ndate online retail shopping_mall total\n图表有5个：\nCustomer Online 数字\nCustomer Total Visit 数字\nCustomer Visit in Each Month 每月数据面积图\nCustomer 2022 Visit\nCustomer 2021 Visit\nChart Types 中的 面积图直观。\nOrder（多表联结）- 来源就是一张xlsx的excel数据 15MB Customer - Order - OrderProduct - Product - order_product_extra_info 此处在联表时， order_id 可以有多条内容。（一个order_id 对应多个 OrderProduct）\norder_product_extra_info存放的是：\nop_id\norder_id\norder_product_total_retail_price\norder_product_total_wholesale_price\norder_product_total_profit\n分组后，使用面积图。\n还有每日热力图。\nNext - Python展示 使用Python读取excel或csv数据后，展示出来。\n数据同步 数据建模 表Triggers https://www.cnblogs.com/geaozhang/p/6819648.html\n","permalink":"https://bp0604.github.io/post/navicat-premium-tips/","summary":"突然发现有些功能还没有使用过，在这里记录一下。","title":"Navicat Premium小知识"},{"content":" Written with StackEdit.\n项目链接 Github Homepage Live Demo\nMySQL + Bytebase MySQL 是世界上最受欢迎的开源数据库。 Bytebase 原生支持 MySQL 数据库来管理架构更改、备份、记录变更历史等。\n技术点 后端 Golang 前端 React，支持生成每日memo截图。 开发Steps 1. pull source code git clone https://github.com/usememos/memo 1. start backend using air(with live reload) air -c scripts/.air.toml 3. start frontend dev server cd web \u0026amp;\u0026amp; yarn \u0026amp;\u0026amp; yarn dev 访问 http://localhost:3000 并自带热加载\n后端 模块 bin/server/main.go\nmetric github.com/usememos/memos/plugin/metrics github.com/usememos/memos/server github.com/usememos/memos/server/profile github.com/usememos/memos/store DB github.com/usememos/memos/store/db 都在server/server.go中使用\ntype Server struct { e *echo.Echo Collector *MetricCollector Profile *profile.Profile Store *store.Store } 数据库sqlite 最新的sql文件 https://raw.githubusercontent.com/usememos/memos/main/store/db/migration/prod/LATEST__SCHEMA.sql\nmigrate记录在 sqlite_schema，migration_history 表中，此处没有列出。 https://github.com/usememos/memos/blob/main/store/db/migration_history.go\n除了migrate，还有seed\nid自增写法，并且直接在字段上设置了 主键：\nid INTEGER PRIMARY KEY AUTOINCREMENT, 对比mysql写法：sqlite 的 autoincrement 修改为 MySQL 的 auto_increment CREATE TABLE TableName ( `id` int(11) NOT NULL AUTO_INCREMENT COMMENT \u0026#39;文章ID\u0026#39;, `title` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT \u0026#39;标题\u0026#39;, `created_at` timestamp NULL DEFAULT NULL COMMENT \u0026#39;创建时间\u0026#39;, `updated_at` timestamp NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP COMMENT \u0026#39;更新时间\u0026#39;, PRIMARY KEY (`id`) USING BTREE ) ENGINE = InnoDB AUTO_INCREMENT = 1 COMMENT = \u0026#39;文章\u0026#39;; 有一种 限定为 enum的写法：\nrow_status TEXT NOT NULL CHECK (row_status IN (\u0026#39;NORMAL\u0026#39;, \u0026#39;ARCHIVED\u0026#39;)) DEFAULT \u0026#39;NORMAL\u0026#39;, 时间设置为当前时间写法，值为int类型：\ncreated_ts BIGINT NOT NULL DEFAULT (strftime(\u0026#39;%s\u0026#39;, \u0026#39;now\u0026#39;)), updated_ts BIGINT NOT NULL DEFAULT (strftime(\u0026#39;%s\u0026#39;, \u0026#39;now\u0026#39;)), 表有：\nuser\nmemo\nmemo_organizer 多对多 关联表（一对多，直接在memo中添加user_id就可以），此处为何是多对多？\nshortcut\nresource 存放的图片？\nmemo_resource 关联表\nuser_setting 使用的是 key value\nsystem_setting\n权限token认证 echo 框架有 basic auth 的middleware。\nApi控制层 swagger 与http服务器 serve 统一返回数据common.go\ncomposeResponse\nGo web framework\necho\nhttps://github.com/labstack/echo https://echo.labstack.com/ 有protobuf的第三方包： https://github.com/go-woo/protoc-gen-echo 有很多的middleware\n路由注册在各个文件中：\ntag.go中：\nregisterTagRoutes\n调用了数据库\nmemoList, err := s.Store.FindMemoList(ctx, \u0026amp;memoFind)\n数据库层 store与store/db 直接使用的是 database/sql，\n或许使用 sqlx 更易阅读些。\n前端 对应web目录下文件\n后端定位前端文件： server/embed_frontend.go 中定义了 embedFrontend方法\nreact hook store的写法， typescript(?的写法和kotlin有点像)，axios，tailwindcss 各种混在一起，完成看不懂了。\nweb/src/services 是各种 async 请求。\nweb/src/pages 是各种页面。\n有的后缀为 ts，有的为 tsx，不知道区别？\nweb/src/less 下有好多 css的文件。 web/src/labs 下有 html2images\n前端返回接收：web/src/helpers/api.ts\ntype ResponseObject\u0026lt;T\u0026gt; = { data: T; error?: string; message?: string; }; 试下看下git提交记录。\nNext - 不容易，难怪python有框架处理前端 总结，我看了下，难度还不小。\nGit提交记录，从最初开始看 工具：\nfork gittyup（但有个问题：checkout历史版本时UI会刷新，需要向下找到checkout点） cd /Volumes/Work/temp git clone https://github.com/usememos/memos.git 项目最早提交为：2021/12/8 路由使用的是 gorilla/mux api 中的AuthCheckerMiddleWare 此时的sql还写的很标准。\n前端为： vite react less typescript\n部署（前后端打包为单文件） https://github.com/usememos/memos/blob/main/Dockerfile\nhttps://github.com/usememos/memos/blob/main/docker-compose.yaml\nweb前端目录会build生成在下面的目录：\n./server/dist\n然后由后端打包为单个文件：memos，并放在下面的目录：/usr/local/memos\n通过air的方式，实现热加载。\nENTRYPOINT [\u0026quot;./memos\u0026quot;, \u0026ldquo;\u0026ndash;mode\u0026rdquo;, \u0026ldquo;prod\u0026rdquo;, \u0026ldquo;\u0026ndash;port\u0026rdquo;, \u0026ldquo;5230\u0026rdquo;]\n启动的参数传入Profile\n更多 扩展：sqlite导入mysql mysql 与 sqlite3 数据库之间相互导入导出(使用工具) https://blog.csdn.net/qq_36546699/article/details/117417574\n导出为csv，再导入（sqlite=\u0026gt;csv=\u0026gt;mysql） https://cloud.tencent.com/developer/article/1888637\nmysql导入为sqlite 需要用下面工具： mysql2sqilite\nsqlite导入为mysql 使用 python 代码转换 sqlite3 语法格式文件为 mysql 语法格式文件 ./sqlite3-to-mysql.py dump.sql \u0026gt; new.sql\nsqlite3-to-mysql.py 内容如下：\n#! /usr/bin/env python import re, fileinput, tempfile from optparse import OptionParser IGNOREDPREFIXES = [ \u0026#39;PRAGMA\u0026#39;, \u0026#39;BEGIN TRANSACTION;\u0026#39;, \u0026#39;COMMIT;\u0026#39;, \u0026#39;DELETE FROM sqlite_sequence;\u0026#39;, \u0026#39;INSERT INTO \u0026#34;sqlite_sequence\u0026#34;\u0026#39;, ] REPLACEMAP = {\u0026#34;INTEGER PRIMARY KEY\u0026#34;: \u0026#34;INTEGER AUTO_INCREMENT PRIMARY KEY\u0026#34;, \u0026#34;AUTOINCREMENT\u0026#34;: \u0026#34;AUTO_INCREMENT\u0026#34;, \u0026#34;DEFAULT \u0026#39;t\u0026#39;\u0026#34;: \u0026#34;DEFAULT \u0026#39;1\u0026#39;\u0026#34;, \u0026#34;DEFAULT \u0026#39;f\u0026#39;\u0026#34;: \u0026#34;DEFAULT \u0026#39;0\u0026#39;\u0026#34;, \u0026#34;,\u0026#39;t\u0026#39;\u0026#34;: \u0026#34;,\u0026#39;1\u0026#39;\u0026#34;, \u0026#34;,\u0026#39;f\u0026#39;\u0026#34;: \u0026#34;,\u0026#39;0\u0026#39;\u0026#34;, } def _replace_match_allcase(line, src, dst): line = line.replace(src,dst) line = line.replace(src.lower(),dst) return line def _replace(line): if any(line.startswith(prefix) for prefix in IGNOREDPREFIXES): return for (src,dst) in REPLACEMAP.items(): line = _replace_match_allcase(line, src, dst) return line def _backticks(line, in_string): \u0026#34;\u0026#34;\u0026#34;Replace double quotes by backticks outside (multiline) strings \u0026gt;\u0026gt;\u0026gt; _backticks(\u0026#39;\u0026#39;\u0026#39;INSERT INTO \u0026#34;table\u0026#34; VALUES (\u0026#39;\u0026#34;string\u0026#34;\u0026#39;);\u0026#39;\u0026#39;\u0026#39;, False) (\u0026#39;INSERT INTO `table` VALUES (\\\\\u0026#39;\u0026#34;string\u0026#34;\\\\\u0026#39;);\u0026#39;, False) \u0026gt;\u0026gt;\u0026gt; _backticks(\u0026#39;\u0026#39;\u0026#39;INSERT INTO \u0026#34;table\u0026#34; VALUES (\u0026#39;\u0026#34;Heading\u0026#39;\u0026#39;\u0026#39;, False) (\u0026#39;INSERT INTO `table` VALUES (\\\\\u0026#39;\u0026#34;Heading\u0026#39;, True) \u0026gt;\u0026gt;\u0026gt; _backticks(\u0026#39;\u0026#39;\u0026#39;* \u0026#34;text\u0026#34;:http://link.com\u0026#39;\u0026#39;\u0026#39;, True) (\u0026#39;* \u0026#34;text\u0026#34;:http://link.com\u0026#39;, True) \u0026gt;\u0026gt;\u0026gt; _backticks(\u0026#34; \u0026#39;);\u0026#34;, True) (\u0026#34; \u0026#39;);\u0026#34;, False) \u0026#34;\u0026#34;\u0026#34; new = \u0026#39;\u0026#39; for c in line: if not in_string: if c == \u0026#34;\u0026#39;\u0026#34;: in_string = True elif c == \u0026#39;\u0026#34;\u0026#39;: new = new + \u0026#39;`\u0026#39; continue elif c == \u0026#34;\u0026#39;\u0026#34;: in_string = False new = new + c return new, in_string def _process(opts, lines): if opts.database: yield \u0026#39;\u0026#39;\u0026#39;\\ drop database IF EXISTS {d}; create database {d} character set utf8; grant all on {d}.* to {u}@\u0026#39;localhost\u0026#39; identified by \u0026#39;{p}\u0026#39;; use {d};\\n\u0026#39;\u0026#39;\u0026#39;.format(d=opts.database, u=opts.username, p=opts.password) yield \u0026#34;SET sql_mode=\u0026#39;NO_BACKSLASH_ESCAPES\u0026#39;;\\n\u0026#34; in_string = False for line in lines: if not in_string: line = _replace(line) if line is None: continue line, in_string = _backticks(line, in_string) yield line def _removeNewline(line, in_string): new = \u0026#39;\u0026#39; for c in line: if not in_string: if c == \u0026#34;\u0026#39;\u0026#34;: in_string = True elif c == \u0026#34;\u0026#39;\u0026#34;: in_string = False elif in_string: if c == \u0026#34;\\n\u0026#34;: new = new + \u0026#39;Newline333\u0026#39; continue if c == \u0026#34;\\r\u0026#34;: new = new + \u0026#39;carriagereturn333\u0026#39; continue new = new + c return new, in_string def _replaceNewline(lines): for line in lines: line = line.replace(\u0026#34;Newline333\u0026#34;, \u0026#34;\\n\u0026#34;) line = line.replace(\u0026#34;carriagereturn333\u0026#34;, \u0026#34;\\r\u0026#34;) yield line def _Newline(lines): in_string = False for line in lines: if line is None: continue line, in_string = _removeNewline(line, in_string) yield line def main(): op = OptionParser() op.add_option(\u0026#39;-d\u0026#39;, \u0026#39;--database\u0026#39;) op.add_option(\u0026#39;-u\u0026#39;, \u0026#39;--username\u0026#39;) op.add_option(\u0026#39;-p\u0026#39;, \u0026#39;--password\u0026#39;) opts, args = op.parse_args() lines = (l for l in fileinput.input(args)) lines = (l for l in _Newline(lines)) f = tempfile.TemporaryFile() for line in lines: f.write(line) f.seek(0) lines = (l for l in f.readlines()) f.close() lines = (l for l in _process(opts, lines)) for line in _replaceNewline(lines): print line, if __name__ == \u0026#34;__main__\u0026#34;: main() ","permalink":"https://bp0604.github.io/post/github-opensource-memos-study/","summary":"之前就有看到这个开源项目，并且在ios上可使用快捷方式快速发布随想，但当时翻issues感觉不太成熟。最近发现真的有人部署并使用了它。我打算看下其技术实现，毕竟这是一个完整的正在发展又比较精简的项目。","title":"Github开源memos学习"},{"content":"目的 使用hugo搭建blog的目的是什么？ 我需要一种时间线式的方式，记录当下做的事情（做了什么，有什么成果），相当于做读书笔记与感想，Wiki式的就没有办法按时间线的展示（可参考程序员在家做饭方法指南）。 后续补充整合的内容，需要在版本中记录下来。\n不要放的内容： 如果是todo类的记录，就不要放在hugo中。（目前在幕布，但没有整理，有点乱）\n快速搭建 在Github上找到了一个示范，直接在上面改的。\n巴西的一位 data 分析的博客 https://devmedeiros.com/archives/ https://github.com/devmedeiros/devmedeiros.github.io 由于papermod原版并不支持侧边栏导航，所以找到了增加版：papermodx\n相关theme使用git submodule的命令安装。\nBilibili，Youtube视频的插入，参考了：\nhttps://www.sulvblog.cn/posts/blog/shortcodes/\n由于Gitee Pages需要上传身份证来实名认证。所以只好发布在了GithubPages。 目前是public目录直接推送的方式。\n相关代码位置 源码还是放在 gitee 的hugo下的hugoblog中。\ngithub pages 是把build出来的public目录，直接推送上去的。\n本地Preview： cd /Users/baopen/Code/Config/gitee/hugo/hugoblog hugo server -D visit: http://localhost:1313/ ./deploy-github.sh visit: https://bp0604.github.io/ 后续 可以使用 github action 的方式来部署。\n也可以使用 drone cicd 来定时推送。\n也可以在本地使用Git post-receive 脚本来完成自动化。\n本地目录同步(使用RealTimeSync，Freefilesync自带) 监视的文件夹： /Users/baopen/Code/Config/gitee/homelab-config/Hugo/content 命令行： open /Applications/FreeFileSync.app /Volumes/Work/FreeFileSync/hugo-from-homelab-to-hugo.ffs_batch 更多 theme Doks — Modern Documentation Theme Introduction - Doks 使用： mCaptcha - mCaptcha\nZen theme 使用： emacstalk https://emacstalk.github.io/post/013/\nwiki 样式 https://github.com/alex-shpak/hugo-book demo: https://hugo-book-demo.netlify.app/ 使用： https://tonybai.com/2020/06/27/gohugo-vs-mdbook-vs-peach/\nNext 可以部署在vercel，或者是走cos的静态网页。\n目前问题 浅色主题时，代码颜色显示有问题。 ","permalink":"https://bp0604.github.io/post/hugo-build-steps/","summary":"大佬们说，只有分享在了网上，才有了前进的动力（精益求精）。我决定把平时学习整理的内容，按时间线发布在博客中，于是就有了这篇文章。","title":"Hugo搭建记录"},{"content":"python方式调用 \\# https://www.youtube.com/watch?v=\\_xVTgdpokH4 \\# jupyter notebook !pip install git+https://github.com/openai/whisper.git import whisper #model = whisper.load\\_model(\u0026#34;base\u0026#34;) model = whisper.load\\_model(\u0026#34;medium\u0026#34;) out = model.transcribe(\u0026#34;quickclip.mp3\u0026#34;) #还自带了翻译的功能 #out = model.transcribe(\u0026#34;quickclip.mp3\u0026#34;, language=\u0026#34;Chinese\u0026#34;) out 命令行调用(from massCode) conda create -n whisper python=3.9 conda activate whisper pip install git+https://ghproxy.com/github.com/openai/whisper.git whisper audio.mp3 --model medium --language Chinese whisper a.mp3 --language en --model medium whisper Chinese.mp3 --language Chinese whisper Chinese.mp3 --language Chinese --model medium 官方说明 Github\n模型base需要1GB内存，medium需要5GB。\n实际应用 对于播客爱好者来说，很快，拥有自动高质量转写的播客客户端不再是梦。\n使用Openai-Whisper自动生成语音/视频字幕，优点是：\n识别正确率高、使用方便快捷。 免费！ 速度比剪映快（剪映也可以免费生成字幕） 本地运行，不需要上传任何数据，个人隐私数据上有保障。 生成语音/视频字幕 doc:\nhttps://www.bilibili.com/read/cv19254244?spm_id_from=333.999.0.0\nvideo:\nhttps://www.bilibili.com/video/BV1Ng41167Qv/?spm_id_from=333.999.0.0\u0026amp;vd_source=95a11d087d5ed1a70b0f82c591dd28c2\nWebui code:\naadnk/whisper-webui at main (huggingface.co) https://huggingface.co/spaces/aadnk/whisper-webui/tree/main\nREADME中有 docker 运行方法\nhttps://huggingface.co/spaces/aadnk/whisper-webui/blob/main/README.md\nrequirements.txt 包含了如下：\npip3 install -r requirements.txt\n前置条件\npip install gradio pip install yt-dlp 下载代码，在snapshot目录下\nfrom huggingface_hub import snapshot_download YOUR_TOKEN = \u0026#34;コピーしたアクセストークン\u0026#34; snapshot_download( repo_id=\u0026#34;aadnk/whisper-webui\u0026#34;, repo_type=\u0026#34;space\u0026#34;, revision=\u0026#34;main\u0026#34;, use_auth_token=YOUR_TOKEN, cache_dir=\u0026#34;./\u0026#34;) 运行报错 ModuleNotFoundError: No module named\ncd /Volumes/Work/whisper/spaces--aadnk--whisper-webui/snapshots/8f3aedf265ab966dd57de0f6f54b1164c2d52685 python app-local.py 解决方法： 文件都是链接，手动复制代码到文件中，\ncd /Volumes/Work/whisper-webui \u0026amp;\u0026amp; python app-local.py [http://127.0.0.1:7860/](http://127.0.0.1:7860/) 选项设置： 较长的音频文件（\u0026gt;10 分钟），建议在 VAD 选项中选择 Silero VAD（Voice Activity Detector）。 VAD - Padding (s) 选项：默认1秒，相当前后调整位置。\n实测 运行要先下载模型 medium 1.42G，并放到指定的路径。 /Users/baopen/.cache/whisper/medium.pt exists, but the SHA256 checksum does not match; re-downloading the file\n错误处代码，把initial_prompt 那行注释点可使用。\n# Callable for processing an audio file whisperCallable = lambda audio, segment_index, prompt, detected_language : model.transcribe(audio, \\ language=language if language else detected_language, task=task, \\ initial_prompt=self._concat_prompt(initial_prompt, prompt) if segment_index == 0 else prompt, \\ **decodeOptions) 对应说明： https://github.com/openai/whisper/blob/main/whisper/transcribe.py\n命令行运行，生成了vtt文件。\n会生成临时文件：\nDeleting source file /var/folders/ry/rsmhdjjd2nnfwdb64dc734n00000gn/T/11bs3qbe9i.mp3\n2分44秒mp4视频 CPU 500%占用\n需要10分钟：13:50 - 14:00\n生成临时文件：\n/var/folders/ry/rsmhdjjd2nnfwdb64dc734n00000gn/T/v0200fg10000cdjq65bc77u91ditj1fg2ttkicym.MP4\n清理临时文件：\nrm /var/folders/ry/rsmhdjjd2nnfwdb64dc734n00000gn/T/*.mp4\n问题：最后面的4句话没有转换到 默认的设置\nNext 前端使用gradio，后台是whisper模型提供的接口。\n可以再看下相关代码，是如何把一把小的功能集成的。\n比如：多种字幕格式。。。\n补充 视频剪辑工具 AutoCut by 李沐 分享如何使用 Whisper 为外语视频自动生成字幕 whisper jp.mp4 视频时长 90 分钟，我使用 3080Ti 显卡转录，用时 10 分钟。 如果你使用 CPU 转录，时间会增加 5-10 倍。\nhttps://sspai.com/post/76899\n离线翻译\nhttps://github.com/argosopentech/argos-translate https://marcoshuerta.com/dash/atp_search/\nvtt文件 可以使用 vtt to srt 工具。\nVTT 文件是以 WebVTT 字幕格式保存的字幕文件。WebVTT 是一种文本数据格式，用于存储字幕，跟.SRT 字幕格式类似，只是功能上有一定扩展，并且很好的被 HTML5 支持。VTT 文件为视频内容提供字幕、视频文本描述、章节导航以及任何形式与视频、音频内容时间相关的媒体信息，但 VTT 文件不包含任何视频数据。\nWebVTT 全称 Web Video Text Tracks，是通过 HTML5 中的元素来标记额外的文字轨资源。目前 WebVTT 标准依然是处于草案阶段，但其基本功能已被多数浏览器支持。\n大多数在线视频托管服务（例如 YouTube 和 Vimeo）都允许用户使用 VTT 文件为视频添加字幕，就像我们在本地播放器使用外挂字幕文件一样。\nhttps://developer.mozilla.org/zh-CN/docs/Web/API/WebVTT_API\nsrt 字幕生成相关方法 \u0026#34;\u0026#34;\u0026#34; Write a transcript to a file in SRT format. Example usage: from pathlib import Path from whisper.utils import write_srt result = transcribe(model, audio_path, temperature=temperature, **args) # save SRT audio_basename = Path(audio_path).stem with open(Path(output_dir) / (audio_basename + \u0026#34;.srt\u0026#34;), \u0026#34;w\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as srt: write_srt(result[\u0026#34;segments\u0026#34;], file=srt) \u0026#34;\u0026#34;\u0026#34; ","permalink":"https://bp0604.github.io/post/openai-whisper-in-python/","summary":"语音转文字，有Web页可以使用，我是在Bilibili上看到的。","title":"OpenAi Whisper in Python"},{"content":"网络模式（推荐） 选择 Web browser interface\n可设置用户名，密码。\nDefault interface： 如果是index.html，有控制按钮。\n有多组监听轨道的情形：选择more_me.html，然后选择监听轨道。\n如何想使用域名访问：\n勾选 Use rc.reaper.fm\nID取个名字， 就会有个域名的链接地址。\niPad或其他终端上打开链接即可，\n当前可用设置链接为：http://192.168.2.32:18080\nmidi控制器模式 此处未演示\nOSC模式 Preference → Control/OSC/web\n选择 OSC\ndaw设置 Device name: iPad\nPattern config: Default, LogicTouch for phone?\nMode: Configure device IP +local port\nDevice port: 9005\nLocal listen port: 8005 Device IP: fix me\nPress Listen Button\nNote:\n如果有多个远程控制，端口号不能重复。\niPad设置 TouchOSC\nLayout: LogicPad\n","permalink":"https://bp0604.github.io/post/reaper-daw-101-part6-remote-control/","summary":"Reaper 有很强大的远程网页控制面板，比其他daw强大很多。","title":"Reaper DAW 101 part6 -- 远程控制"},{"content":"链接\nReaper for Podcasting: A Beginner\u0026rsquo;s Guide for New Users\n设置 自动保存备份\n操作 波形放大点：cmd shift n(如果split后有多断音频，双击全选，shift n更合适)\n（标准化Normalise Items : Control+Shift+N）\n仍然可以调整Gain值。\n点击，滚轮上下方向放大\ns - split\ndelete\ntips: 勾选9个方框的图标后，删除时，会自动向前移吸附。\n选中中间的片段 ctrl + delete删除，使用这种方式快捷。\n勾选，选项-连续滚动，这样，播放时，波形会跟随显示\n可以 grid line 的图标不选，不然只能选择在网格的位置\nfade，拖动两个音频交叉\n导出：file-render\nMono\nmp3 128kpbs\n后期 目前，明显有开头音量大的问题，使用压缩ReaComp，参数为预设。\n参考 快捷键大全：\nhttps://reaperaccessibility.com/index.php/Reaper_shortcut_key_list_by_headings\n","permalink":"https://bp0604.github.io/post/reaper-for-podcast-beginner-guide/","summary":"Reaper 初学者快速上手，包含剪辑的一些快捷键","title":"Reaper for podcast - 初学者快速上手"},{"content":"1.提高转化效率 就是让看房的客户能够心动\n首先就是清理和清扫 把家里面破旧杂乱的物品全部处理掉\n可以让房子的空间感更强 请一个专业的保家阿姨把房子打扫干净， 看起来焕然一新\n第二点家居升级 把家里面黯淡的灯光搞亮一点 花钱买一些绿纸和挂画 软装搭配布置一下，让自己的房子看起来更有品位一点 第三点找专业的摄影人员来 拍摄房子小区环境照片以及视频\n拍出这套房子的高级感 后期宣传的时候你都可以用得到 第四点专门为你这套房子写一套介绍文案（用PPT或者word文档） 小区周边的板块优势，周边的配套情况，小区的优点， 甚至是房主本人的情况以及发生在这套房子里面 一些有趣的喜悦的事情都可以\n让你的这套房子 有一种与众不同的生命力 第五点挂牌价要设置在同类产品平均成交价上下 这不一定是你的心理价位 但是一定是能够 吸引到客户过来看房的价位 2.获取更多的精准流量 有时候不是房子不好 只是没有找到足够多的客户\n你可以配二三十把钥匙， 给三五公里之类的所有中介门店每家都放一把钥匙，方便看房\n并且邀请中介去家里面看房 让他们对你的房子 有一个直观的印象\n因为一般情况下 中介更愿意推荐自己熟悉的房子 第二点 每家中介的 我加一下\n把你拍摄的房子照片视频 以及这套房子的介绍文案 都发给他们\n还可以为中介写好朋友圈的文案 他们直接复制粘贴就可以了 并且设置成交奖励\n第三点 非常有亮点的房子 也可以起人拍抖音 发gzh 来拓展流量池\n以上这些动作，其实花费不了太多的成b 但是一定能够 大大提升你房子的待看量 转化率以及最终的成交j\n来源与总结 22年10月08日，我在抖音上看到 yang102long 有个讲如何卖出你手上的二手房的视频，感觉说得很到位。\n所以使用 whisper 生成了相关的文本，在用思维导图整理了下。\n准备（包括相片视频文案） 宣传 都不可缺少。\n也适应于其他领域。\n","permalink":"https://bp0604.github.io/post/how-to-sell-second-house/","summary":"Marketing - How to Sell Your Second-hand House。如何才能有效的卖出二手房，还是需要一些系统性的思维方式和手段，本文会给出一些建议。","title":"营销 - 如何卖出你的二手房"},{"content":"链接 Postman Beginner\u0026rsquo;s Course - API Testing\n详细 设置 变量 {{baseUrl}}\nscope为collection\nedit collection 选到 Variables页\ninitial value 是shared的。\n而 current value 是私有的。\naccessToken\nBearer Token\n{{accessToken}}\njson 选 raw\n{ \u0026#34;userId\u0026#34;: 1, \u0026#34;id\u0026#34;: 2, \u0026#34;title\u0026#34;: \u0026#34;qui est esse\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;est rerum tempore vitae\\nsequi sint nihil reprehenderit dolor beatae ea dolores neque\\nfugiat blanditiis voluptate porro vel nihil molestiae ut reiciendis\\nqui aperiam non debitis possimus qui neque nisi nulla\u0026#34; } Randon test data\n{ \u0026#34;title\u0026#34;: \u0026#34;{{$randomJobTitle}}\u0026#34;, \u0026#34;body\u0026#34;: \u0026#34;bar\u0026#34;, \u0026#34;userId\u0026#34;: 1000 } 在console 中查看\nRequest Body 中内容\n关闭Tabs\nForce to close tabs\nUnit 2 - Test automation with Postman\n⌨️ Lesson 19 - Introduction to test automation (1:01:52) ⌨️ Lesson 20 - Your first API tests (1:02:52​) ⌨️ Lesson 21 - Assignment (1:14:55) ⌨️ Lesson 22 - Postman variables (1:19:20) ⌨️ Lesson 23 - Extracting data from the response (1:24:13) ⌨️ Lesson 24 - Assignment (1:36:51) ⌨️ Lesson 25 - Assignment (1:38:08) ⌨️ Lesson 26 - Collection runner (1:42:52) ⌨️ Lesson 27 - Request execution order (1:49:00) ⌨️ Lesson 28 - Postman monitors (1:53:32) ⌨️ Lesson 29 - Newman (1:57:45) ⌨️ Lesson 30 - HTML reports with Newman (2:01:58) ⌨️ Lesson 30 - CI/CD overview (2:05:28) ⌨️ Lesson 31 - Conclusion (2:08:24) Tests 页面 \u0026amp; Test result\n有示范\nhttps://learning.postman.com/docs/writing-scripts/test-scripts/\npm.test(\u0026#34;Your test name\u0026#34;, function () { var jsonData = pm.response.json(); pm.expect(jsonData.value).to.eql(100); }); const respone = pm.resource.json(); const nonFictionBooks = response.filter((book) =\u0026gt; book.availabel === true ) console.log(nonFictionBooks[0]) pm.expect(book).to.be.an(\u0026#39;object\u0026#39;) to.be.true to.eql.. Global variables\npm.globals.set(\u0026#34;variable key\u0026#34;, \u0026#34;variable value\u0026#34;) Collection Runner 底部的 runner\n然后把 collection 拖过来\nexecuate order 代码：\npostman.setNextRequest(\u0026#34;API Status\u0026#34;); postman.setNextRequest(null); 如果 循环设置了， 就会一直运行。\nmonitor 线上功能 不用点击运行。\nMonitor Collection\nEveryday 。。。\n会使用 initial value\nNewman 重点 cli tool\nnewman \u0026ndash;version\nCollection -\u0026gt; Export\napi key\nshare 但更改不会更新，需要重新生成\nnewman run export.json\nRunning collections on the command line with Newman\nhttps://learning.postman.com/docs/running-collections/using-newman-cli/command-line-integration-with-newman/\nNewman with Docker\nhttps://learning.postman.com/docs/running-collections/using-newman-cli/newman-with-docker/\nhttps://github.com/postmanlabs/newman\n使用参考 realworld html report for newman newman-reporter-htmlextra\nnewman run export.json \u0026ndash;exportors=cli,htmlextra\nCi/cd overview More mock\ndata-driver test\ncustomer-data.csv\n","permalink":"https://bp0604.github.io/post/youtube-postman-beginners-course-api-testing/","summary":"Youtube上使用Postman集成测试的入门教程，涉及newman的使用。","title":"Postman Beginner's Course - API Testing"},{"content":"You can find me at:\nMail: QQ mail ","permalink":"https://bp0604.github.io/about/","summary":"about","title":"About"},{"content":"资源 代码随想录 https://programmercarl.com/\n算法，原来是同一个仓库 https://github.com/TheAlgorithms/Java https://github.com/TheAlgorithms/Python 用 Python 实现所有算法。该项目是用 Python 语言实现各种算法的集合，主要用于教育和学习。包括搜索、排序、数据结构、机器学习、密码、神经网络等方面。\n精简版答案 https://github.com/yifeikong/interview\n包含多门语言的实现 https://github.com/doocs/leetcode\n有基础的情况下刷算法跟着 [代码随想录]( https://www.programmercarl.com/) 找同类型题做比较好。\npython leetcode https://github.com/Nriver/leetcode\nacwing https://www.acwing.com/problem/content/1/\nneetcode https://neetcode.io/\n","permalink":"https://bp0604.github.io/post/leetcode/","summary":"用来熟悉语言特性，似乎不错。","title":"Leetcode"},{"content":"The following are a few projects that I have worked on in my free time. They are in no particular order.\n","permalink":"https://bp0604.github.io/projects/","summary":"projects","title":"Projects"}]